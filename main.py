import os
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters

# üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PROJECT_ID = os.getenv("PROJECT_ID")
ACTIVE_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")  # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å gpt-3.5-turbo –∏–ª–∏ gpt-4

# üí± –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞
def get_usd_to_rub():
    try:
        response = requests.get("https://api.exchangerate.host/latest?base=USD&symbols=RUB", timeout=5)
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if "rates" in data and "RUB" in data["rates"]:
            rate = data["rates"]["RUB"]
            return f"üíµ –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: 1 USD = {rate:.2f} RUB"
        else:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}"

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()

    # üí± –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞
    if "–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞" in user_input or "–¥–æ–ª–ª–∞—Ä" in user_input:
        reply = get_usd_to_rub()
        await update.message.reply_text(reply)
        return

    # üîÅ GPT-–æ—Ç–≤–µ—Ç
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "OpenAI-Project": PROJECT_ID,
        "Content-Type": "application/json"
    }

    data = {
        "model": ACTIVE_MODEL,
        "messages": [{"role": "user", "content": user_input}]
    }

    try:
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        response_data = response.json()
        model_used = response_data.get("model", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        reply_text = response_data["choices"][0]["message"]["content"]
        reply = f"(–ú–æ–¥–µ–ª—å: {model_used})\n\n{reply_text}"
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    await update.message.reply_text(reply)

# üß† –ö–æ–º–∞–Ω–¥–∞ /model ‚Äî –≤—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {ACTIVE_MODEL}")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("model", model_command))
    app.run_polling()
