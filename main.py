import os
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters

# üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PROJECT_ID = os.getenv("PROJECT_ID")
ACTIVE_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")  # –ú–æ–∂–Ω–æ: gpt-3.5-turbo, gpt-4, gpt-4o

# üí± –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∫ RUB —á–µ—Ä–µ–∑ Frankfurter API
def get_currency_rate_to_rub(query: str) -> str:
    aliases = {
        "–¥–æ–ª–ª–∞—Ä": "USD",
        "–µ–≤—Ä–æ": "EUR",
        "—Ñ—É–Ω—Ç": "GBP",
        "–∏–µ–Ω–∞": "JPY",
        "—é–∞–Ω—å": "CNY",
        "—é–∞–Ω–∏": "CNY",
        "—Ñ—Ä–∞–Ω–∫": "CHF",
        "–≥—Ä–∏–≤–Ω–∞": "UAH",
        "—Ç–µ–Ω–≥–µ": "KZT",
        "—Ä—É–ø–∏—è": "INR"
    }

    for word in query.split():
        code = aliases.get(word.lower(), word.upper())
        if len(code) == 3 and code.isalpha():
            try:
                url = f"https://api.frankfurter.app/latest?from={code}&to=RUB"
                response = requests.get(url, timeout=5)
                data = response.json()

                if "rates" in data and "RUB" in data["rates"]:
                    rate = data["rates"]["RUB"]
                    return f"üí± –ö—É—Ä—Å {code}: 1 {code} = {rate:.2f} RUB"
                else:
                    return f"‚ö†Ô∏è Frankfurter API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫—É—Ä—Å RUB –¥–ª—è {code}."
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}"

    return "‚ùì –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä, –∫—É—Ä—Å EUR, –∫—É—Ä—Å —Ñ—É–Ω—Ç–∞)"

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()

    if "–∫—É—Ä—Å" in user_input:
        reply = get_currency_rate_to_rub(user_input)
        await update.message.reply_text(reply)
        return

    # GPT-–æ—Ç–≤–µ—Ç
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "OpenAI-Project": PROJECT_ID,
        "Content-Type": "application/json"
    }

    data = {
        "model": ACTIVE_MODEL,
        "messages": [{"role": "user", "content": user_input}]
    }

    try:
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        response_data = response.json()
        model_used = response_data.get("model", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        reply_text = response_data["choices"][0]["message"]["content"]
        reply = f"(–ú–æ–¥–µ–ª—å: {model_used})\n\n{reply_text}"
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    await update.message.reply_text(reply)

# üìç –ö–æ–º–∞–Ω–¥–∞ /model ‚Äî —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å
async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {ACTIVE_MODEL}")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("model", model_command))
    app.run_polling()
