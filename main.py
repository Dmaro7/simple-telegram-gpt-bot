import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, CallbackQueryHandler, ContextTypes, filters

# üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ Railway)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PROJECT_ID = os.getenv("PROJECT_ID")
DEFAULT_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")
ACTIVE_MODEL = DEFAULT_MODEL  # –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏

# üîò –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
def model_selection_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("GPT-3.5", callback_data="gpt-3.5-turbo"),
            InlineKeyboardButton("GPT-4", callback_data="gpt-4"),
            InlineKeyboardButton("GPT-4o", callback_data="gpt-4o")
        ]
    ])

# üí± –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —á–µ—Ä–µ–∑ exchangerate.host
def get_usd_to_rub():
    try:
        response = requests.get("https://api.exchangerate.host/latest?base=USD&symbols=RUB")
        rate = response.json()["rates"]["RUB"]
        return f"üíµ –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: 1 USD = {rate:.2f} RUB"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}"

# üß† –û—Ç–≤–µ—Ç –æ—Ç GPT –∏–ª–∏ –∫—É—Ä—Å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()

    # üí¨ –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –∫—É—Ä—Å–æ–º
    if "–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞" in user_input or "–¥–æ–ª–ª–∞—Ä" in user_input:
        reply = get_usd_to_rub()
        await update.message.reply_text(reply, reply_markup=model_selection_keyboard())
        return

    # üîÅ –ò–Ω–∞—á–µ ‚Äî GPT-–æ—Ç–≤–µ—Ç
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "OpenAI-Project": PROJECT_ID,
        "Content-Type": "application/json"
    }

    data = {
        "model": ACTIVE_MODEL,
        "messages": [{"role": "user", "content": user_input}]
    }

    try:
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        response_data = response.json()
        model_used = response_data.get("model", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        reply_text = response_data["choices"][0]["message"]["content"]
        reply = f"(–ú–æ–¥–µ–ª—å: {model_used})\n\n{reply_text}"
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    await update.message.reply_text(reply, reply_markup=model_selection_keyboard())

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ACTIVE_MODEL
    query = update.callback_query
    await query.answer()

    selected_model = query.data
    allowed_models = ["gpt-3.5-turbo", "gpt-4", "gpt-4o"]

    if selected_model in allowed_models:
        ACTIVE_MODEL = selected_model
        await query.edit_message_text(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {ACTIVE_MODEL}")
    else:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–æ–¥–µ–ª—å.")

# üìç –ö–æ–º–∞–Ω–¥–∞ /model ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {ACTIVE_MODEL}")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("model", model_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()
