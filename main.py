import os
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters

# üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PROJECT_ID = os.getenv("PROJECT_ID")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")
ACTIVE_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

# üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
def get_currency_rate_to_rub(query: str) -> str:
    fiat_aliases = {
        "–¥–æ–ª–ª–∞—Ä": "USD", "–µ–≤—Ä–æ": "EUR", "—Ñ—É–Ω—Ç": "GBP", "–∏–µ–Ω–∞": "JPY",
        "—é–∞–Ω—å": "CNY", "—Ñ—Ä–∞–Ω–∫": "CHF", "–≥—Ä–∏–≤–Ω–∞": "UAH", "—Ç–µ–Ω–≥–µ": "KZT", "—Ä—É–ø–∏—è": "INR"
    }

    crypto_aliases = {
        "–±–∏—Ç–∫–æ–∏–Ω": "bitcoin", "btc": "bitcoin", "—ç—Ñ–∏—Ä": "ethereum", "eth": "ethereum",
        "–¥–æ–¥–∂": "dogecoin", "doge": "dogecoin", "usdt": "tether", "—Ç–µ–∑–µ—Ä": "tether",
        "bnb": "binancecoin", "ripple": "ripple", "xrp": "ripple", "sol": "solana"
    }

    words = query.lower().split()

    # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    for word in words:
        crypto_id = crypto_aliases.get(word)
        if crypto_id:
            try:
                url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto_id}&vs_currencies=rub,usd"
                response = requests.get(url, timeout=5)
                data = response.json()
                if crypto_id in data:
                    rub = data[crypto_id].get("rub")
                    usd = data[crypto_id].get("usd")
                    if rub and usd:
                        return (
                            f"üí∞ –ö—É—Ä—Å {crypto_id.capitalize()}:\n"
                            f"1 {crypto_id.upper()} = {rub:,.2f} RUB\n"
                            f"1 {crypto_id.upper()} = {usd:,.2f} USD"
                        )
                    return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è {crypto_id}."
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {e}"

    # –§–∏–∞—Ç
    for word in words:
        fiat_code = fiat_aliases.get(word, word.upper())
        if len(fiat_code) == 3 and fiat_code.isalpha():
            try:
                url = f"https://open.er-api.com/v6/latest/{fiat_code}"
                response = requests.get(url, timeout=5)
                data = response.json()
                rates = data.get("rates", {})
                rub = rates.get("RUB")
                usd = rates.get("USD")
                if rub and usd:
                    return (
                        f"üí± –ö—É—Ä—Å {fiat_code}:\n"
                        f"1 {fiat_code} = {rub:,.2f} RUB\n"
                        f"1 {fiat_code} = {usd:,.2f} USD"
                    )
                elif rub:
                    return f"üí± –ö—É—Ä—Å {fiat_code}: 1 {fiat_code} = {rub:,.2f} RUB"
                else:
                    return f"‚ö†Ô∏è –ö—É—Ä—Å RUB –∏–ª–∏ USD –¥–ª—è {fiat_code} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}"

    return "‚ùì –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä, –∫—É—Ä—Å BTC, –∫—É—Ä—Å ETH)"

# üì∞ –ù–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ NewsAPI
def get_top_news(query: str = None) -> str:
    url = "https://newsapi.org/v2/top-headlines"
    params = {
        "apiKey": NEWS_API_KEY,
        "pageSize": 5,
    }

    if query:
        params["q"] = query
    else:
        params["country"] = "ru"

    try:
        response = requests.get(url, params=params, timeout=5)
        data = response.json()
        articles = data.get("articles", [])
        if not articles:
            return "‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ /news."

        reply = "üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n"
        for article in articles:
            title = article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            url = article.get("url", "")
            reply += f"‚Ä¢ {title}\n{url}\n\n"
        return reply.strip()
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}"

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.lower()

    if "–∫—É—Ä—Å" in user_input:
        reply = get_currency_rate_to_rub(user_input)
        await update.message.reply_text(reply)
        return

    # GPT
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "OpenAI-Project": PROJECT_ID,
        "Content-Type": "application/json"
    }
    data = {
        "model": ACTIVE_MODEL,
        "messages": [{"role": "user", "content": user_input}]
    }

    try:
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        response_data = response.json()
        model_used = response_data.get("model", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        reply_text = response_data["choices"][0]["message"]["content"]
        reply = f"(–ú–æ–¥–µ–ª—å: {model_used})\n\n{reply_text}"
    except Exception as e:
        reply = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    await update.message.reply_text(reply)

# üß† /model
async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {ACTIVE_MODEL}")

# üì∞ /news –∏–ª–∏ /news <—Ç–µ–º–∞>
async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = " ".join(context.args) if context.args else None
    news = get_top_news(topic)
    await update.message.reply_text(news)

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("model", model_command))
    app.add_handler(CommandHandler("news", news_command))
    app.run_polling()
